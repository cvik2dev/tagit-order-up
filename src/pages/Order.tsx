import { useApp } from '@/contexts/AppContext';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Trash2, Share2, Copy } from 'lucide-react';
import { toast } from 'sonner';

export default function Order() {
  const { currentOrder, updateOrderItem, removeFromOrder, clearOrder } = useApp();

  const generateOrderText = () => {
    if (currentOrder.length === 0) return '';

    const orderLines = currentOrder.map(
      ({ item, quantity }) => `${item.emoji} ${item.name} x${quantity}`
    );

    return `ðŸ“‹ *Order Summary*\n\n${orderLines.join('\n')}\n\n_Generated by TagCreator_`;
  };

  const handleCopy = () => {
    const text = generateOrderText();
    navigator.clipboard.writeText(text);
    toast.success('Order copied to clipboard!');
  };

  const handleShare = async () => {
    const text = generateOrderText();
    
    if (navigator.share) {
      try {
        await navigator.share({ text });
      } catch (err) {
        console.error('Share failed:', err);
      }
    } else {
      handleCopy();
    }
  };

  const groupBySupplier = () => {
    const groups: Record<string, typeof currentOrder> = {};
    
    currentOrder.forEach(orderItem => {
      const supplier = orderItem.item.supplier || 'Unknown';
      if (!groups[supplier]) {
        groups[supplier] = [];
      }
      groups[supplier].push(orderItem);
    });

    return groups;
  };

  const supplierGroups = groupBySupplier();

  return (
    <div className="min-h-screen pb-20 px-4 pt-6">
      <div className="max-w-2xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Current Order</h1>
            <p className="text-muted-foreground">
              {currentOrder.length} {currentOrder.length === 1 ? 'item' : 'items'}
            </p>
          </div>
          {currentOrder.length > 0 && (
            <Button
              variant="destructive"
              size="sm"
              onClick={clearOrder}
            >
              Clear All
            </Button>
          )}
        </div>

        {currentOrder.length === 0 ? (
          <Card className="p-12 bg-card border-border">
            <div className="text-center text-muted-foreground">
              <p className="text-lg">Your order is empty</p>
              <p className="text-sm mt-2">Add items to get started</p>
            </div>
          </Card>
        ) : (
          <>
            {/* Order Items by Supplier */}
            <div className="space-y-4">
              {Object.entries(supplierGroups).map(([supplier, items]) => (
                <Card key={supplier} className="p-4 bg-card border-border">
                  <div className="space-y-3">
                    <h3 className="font-semibold text-sm text-muted-foreground uppercase tracking-wide">
                      {supplier}
                    </h3>
                    <div className="space-y-2">
                      {items.map(({ item, quantity }) => (
                        <div key={item.id} className="flex items-center gap-3">
                          <span className="text-xl">{item.emoji}</span>
                          <div className="flex-1">
                            <p className="font-medium">{item.name}</p>
                            <p className="text-xs text-muted-foreground">{item.category}</p>
                          </div>
                          <Input
                            type="number"
                            min="1"
                            value={quantity}
                            onChange={(e) => updateOrderItem(item.id, parseInt(e.target.value) || 1)}
                            className="w-16 text-center bg-input border-border"
                          />
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => removeFromOrder(item.id)}
                          >
                            <Trash2 className="w-4 h-4 text-destructive" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                </Card>
              ))}
            </div>

            {/* Actions */}
            <div className="grid grid-cols-2 gap-3">
              <Button
                onClick={handleCopy}
                variant="outline"
                className="gap-2"
              >
                <Copy className="w-4 h-4" />
                Copy Order
              </Button>
              <Button
                onClick={handleShare}
                className="gap-2 bg-gradient-primary hover:opacity-90"
              >
                <Share2 className="w-4 h-4" />
                Share Order
              </Button>
            </div>

            {/* Preview */}
            <Card className="p-4 bg-muted border-border">
              <h3 className="font-semibold mb-3 text-sm">Preview</h3>
              <pre className="text-xs whitespace-pre-wrap font-mono">
                {generateOrderText()}
              </pre>
            </Card>
          </>
        )}
      </div>
    </div>
  );
}
